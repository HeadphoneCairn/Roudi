=== ATmega328P specifications ===
● High performance, low power AVR® 8-bit microcontroller
● Advanced RISC architecture
  ● 131 powerful instructions – most single clock cycle execution
  ● 32 x 8 general purpose working registers
  ● Fully static operation
  ● Up to 16MIPS throughput at 16MHz
  ● On-chip 2-cycle multiplier
● High endurance non-volatile memory segments 
  ● 32K bytes of in-system self-programmable flash program memory
  ● 1Kbytes EEPROM
  ● 2Kbytes internal SRAM
  ● Write/erase cycles: 10,000 flash/100,000 EEPROM
  ● Optional boot code section with independent lock bits
    ● In-system programming by on-chip boot program
    ● True read-while-write operation
  ● Programming lock for software security

Midichords:
- Sketch uses 9306 bytes (32%) of program storage space. Maximum is 28672 bytes.
- Global variables use 1073 bytes (52%) of dynamic memory, leaving 975 bytes for local variables. Maximum is 2048 bytes.

=== Screen ===
Best font: MIDIBOY_FONT_5X7  5 horizontal, 7 vertical
Screen size: 128x64          128 horizontal, 64 vertical
So number of characters:     128/(5+1) = 21 chars + 2 pixels, 64/(7+1) = 8 lines

=== Arduino coding pitfalls ===
- Watch out for the initalisation order of global variables!
- Don't do advanced stuff in constructors of global variables, such as delay, 
  beep, midi stuff, .... Only do inits of variables and such!
- String scratchpads:
     progmem_string_buffer: only used for GetPString => NEVER USE MANUALLY
     Screen::buffer: typically used to pass a string to the Menu for writing to the Screen
     data_scratch: for extra intermediate text things
- Don't store too much in memory as the RAM is extremely limited,
  instead write everything out in functions
  (this is completely opposite of what I normally do)
- Limit the number of virtual functions needed to be because each function
  requires an extra 2 bytes of dynamic memory, for each subclass! 
