=== TODO ===
x Make single menu
x Make settings menu
x Create menu switching with A and B and A+B
x about menu
  x also show used memory
  x memory used by page classes
  x TODO: bekijk verschil sizeof(Screen::buffer) Screen::buffer_len !!!!
  x TODO: waarom toont hij ABOUT page eerst???  
x Put everything on disk
x Channels menu
x connect menus 
x Save first_line and selected line and field
x save on switch
  x Multi
  x single
  x settings
x save on timer
  x multi
  x single
  x settings
x Make fake Midi Monitor
x Use 12 characters for channels anyway????
x Order of OnStart OnStop Line in Page ... in subclasses
x Allow for single mode, next to split and layer!
x Uitroepteken in namen
x Multi namen beperken tot hoofdletters + nummers + leestekens
x Save the selected page upon timeout: Maybe too much EEPROM access?
x De SaveOnlyIfModified moet eigenlijk gewoon in de data.cpp komen. Dat hoort niet in de pages!
- In de toekomst kijken of de settings-in-memory wel hoeven. Als er niet on-the-fly veel
  settings woren geraadpleegd, dan is gewoon lezen van de EEPROM ook goed. Zoals ik doe 
  voor Single en Multi's.
  (Zou in theorie zelfs in EEPROM_PUT kunnen komen. Altijd eerst lezen om te zien of het
  wel veranderd is.)
x Reactivate timeout = 5 * 1000
x I think I actually can do a new of the pages. If I were to allocate something
  inside the page I would need to free it before freeing the page. I think
  in this way, the heap does not get fragmented. To research online.
  This thought could have made life much easier when creating the UI. :-(
  (PS: could be very useful for the midi monitor which takes up quite some data for the
  message buffer.)
x New setting:
  Other input channels block/pass
x New page
  Midi monitor settings:
  filter x,
  filter Y,
  ...
x Play when velocity is smaller than x%? Useful?
  Implemented as -70%, -80%, -90%, 0%, 10%, 20%, ...  
  Or as <70, <80, <90, >0, >10, >20 ...
x Settings should change MIDI configuration on the fly!
x Make scrollbar canvas 25 chars wide
x New multi menu???
x rotate values if beyond end ? No, prefer no rotation.
- Coding style:
  - Add const to member functions if necessary. And to their parameters.
  - Consider i_, o_, m_
- Settings:
  x velocity curve
  x filters: program change
  x screen brightness
x Need thorough test of MIDI monitor with all kinds of messages, including sysex
- None in Single wilt zeggen: blokkeer alles komende van input Channel
  Maar in about moet gewoon alles doorgestuurd worden op alle kanalen, een beetje een MIDI Thru dus.
- Should I do something with NRPN or RPN in MIDI monitor?
- Do change if MIDI config only when all notes have been released.
  Or force note release before doing switch.
  But SysEx and stuff. And running status...
x Can monitor cope with running state? Yes
x Add Manufacturor to Midi Monitor SysEx => No, don't have space.
x Add Panic to MIDI Monitor or Single/Multi????
x Consider moving the name of a combiline to the combiline itself instead of putting it in the function.
  Nice but uses 2 bytes extra, per combiline.
x Allocate pages on heap instead of stack
- Replace dangerous strncpy with strncat or snprintf ? 
x Can I replace Combiline by just a function like BoolLine ??
  For simplicity and memory and code savings?
  Hmmm, but what about DoubleCombiline than?
x MIDI monitor, "IO to show line" must be completely selectable
x Program storage space:
  x Debugging functions uses about 1000 bytes
  x My logo uses about 1000 bytes
  x Remove Pages::GetPageUsage
  x Remove hardcoded channel names from Data.cpp (SET_DEFAULT_CHANNEL_NAMES)
- Should I block incoming messages on the channels of the output channels
  hmm: 5 -> 5, cannot block 5
       5 -> 5, 6: block 6???
       5 -> 6, 7: block 6 and 7???
- check MSB/LSB order of pitch bend and song position
- Tell Blokas about?
  g_decoder.process() mapping F4, F6, F6 to 0x5, which is also used for sysex
  see also UsbToMidi::process()
x Combiline: more simple pass name, + two functions/ptabs + values,
  name is centered, values are left and right aligned
x About scherm: Panic
  => Nope, now in Single and Multi
  Single scherm: > None: blokkeer input channel, route al de rest
                 > Block: blokkeer alles
  => Nope, None is blokkeer input, rest is gedefinieerd in Settings
x Combine SingleLine and BoolLine
  + Major Cleanup
x Implement filter of pitch bend / mod wheel / cc's for multi
  and how it can be combined with setting filter.
x Multivalue: channel specific stuff should be in a struct!
  ======== 1. MULTI =======
  SPLIT mode    split at C4
  01       channel       05
  Typhon      |      Erebus
  +1       octave         0
  off    pitch bend      on
  on      modwheel      off
  on    control change   on
  0      min velocity     0
  127    max velocity   127
x Of toch nog beter:
  ======== 1. MULTI =======
  Mode                split    
  Split at               C4
  Left           01. Typhon
  Right    05. abcdefghijkl
  Octave            +1    0
  Pitch bend       off   on
  Modwheel          on  off
  Control change    on   on
  Min velocity       0    0
  Max velocity     127  127
x Can go back to 14 chars for Name of channel and multi
x Panic! as menu option in Single and Multi, sends to all 16 channels both Notes off and Sounds off??
- Disallow ActivateNextConfigurationIfAvailable when Sysexclusive is being sent
x I still want abcdefgh...ABCD for the name editor instead of a-zA-Z...
  => Did it. Used 54 extra bytes though ...
- Consider adding the RAW MIDI as an option in the midi monitor menu.
  => Easy to do, but don't have enough program space left.
x Test with buffer of 2 => Had to use !full on output queue instead of hasSpaceFor
x Check TFifo for bugs. Looks like hasSpaceFor doesn't work well for small 1 or 2 element buffers.
  => I'm not using it anymore.
x Need some kind of version number on About screen
  => Made a simple define for it. Not the best solution, but OK.
  - Better also have build date or something
    => Impossible without scripting and that wouldn't be portable.
x Multi:
  x Remove ...
  x Move left
  x Move right
x Share "Panic!" string  
x " %02d. %s " in multi!
  Using "%s" in sprintf uses more dynamic memory, but less program storage!
- It's probably more logical to move the creation of a new multi from SetMulti into NewMulti
x Rename PageNameMulti to PageMultiName and PageNameChannel to PageSingleName
x Change order in Multi to
  > New
  > Move left or right
  > Save as ...
  > Remove ...
x at startup select correct curve (just like we now use correct brightness)
x create proper exponential velocity curve and improve logarithmic
  onderzoek vreemde input nummer 0, 4, ... en interpolatie
  veiligbeid inbouwen: niet over 127!!! of onder 0
x Add rounding to MapVelocity?
x Add case and stand stls to repository
x Why do I have a MIDI output queue when I could just directly write tot the output?
  It would free up 512 bytes of RAM!
  => Made ENABLE_MIDI_OUTPUT_BUFFER define
x How do you make screenshots?
  => Made crappy script that converts picture taken with camera to screenshot.
x Save the selected page to EEPROM upon timeout or save
x What should I do with Notes.txt? Keep my ramblings.
x Clean up bitmaps folder
x Map pitch bend to aftertouch: integrate in pitch bend setting? on / off / after-touch(pressure)
x Add ... to SINGLE channel names
  => In menus with prefixed with >, the .. must be directly after the menu name, e.g. > Save as ...
     In lists, the ... is right aligned width of the screen.
x Move Monitor Settings to pop up menu.
  => No. In the end this is not better.
x In MULTI, I could actually remove the fields for left and right that are not used, like the split point is removed.
  => Tried it. Not necessarily better. Not worth extra program space use.
x Increase the number of stored messages in the MIDI monitor? (Currently 64)
  => Increased to 128
x Update documentation / readme
x Remove more of enable velocity curve editor to free up memory.
x Check Arduino CLI bundled with Arduino Extension for VS Code
x Find a license to use for publication. Check license file in repo.
  => GPLv2 it will be. Added header to all source files.
  x Check for copyright on logo and name
- Proofread documentation.
- Create release 1.1. Set all defines good and make branch for it. Tag it in master.
- Check midi in to out speed. Should velocity mapping become a lookup table now that I have more RAM?
- Find some more program storage space.
  - Sometimes preventing functions to be inlined, helps.
  - Switch back to static allocation of pages instead of dynamic saves 600 bytes
  - You can win some by moving sprintf formats from PSTRING to "", but you loose dynamic memory.  
